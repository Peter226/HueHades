
#pragma kernel NormalBlend;
#pragma kernel MultiplyBlend
#pragma kernel AddBlend
#pragma kernel SubtractBlend;
#pragma kernel InheritAlpha;


Texture2D<float4> BottomLayer;
Texture2D<float4> TopLayer;
RWTexture2D<float4> Result;
float Opacity;


[numthreads(8,8,1)]
void InheritAlpha (uint3 id : SV_DispatchThreadID)
{
    float4 top = TopLayer[id.xy];
    float4 bottom = BottomLayer[id.xy];
    Result[id.xy] = float4(top.rgb, bottom.a);
}


[numthreads(8,8,1)]
void NormalBlend (uint3 id : SV_DispatchThreadID)
{
    float4 top = TopLayer[id.xy];
    top.a *= Opacity;
    float4 bottom = BottomLayer[id.xy];

    float alphaRatioBottom = (min(1.0 - top.a, bottom.a / (bottom.a + top.a)));
    float alphaRatioTop = 1.0 - alphaRatioBottom;

    Result[id.xy] = float4(bottom.rgb * alphaRatioBottom, bottom.a * (1.0 - top.a)) + float4(top.rgb * alphaRatioTop, top.a);
}

[numthreads(8,8,1)]
void MultiplyBlend (uint3 id : SV_DispatchThreadID)
{
    float4 top = TopLayer[id.xy];
    top.a *= Opacity;
    float4 bottom = BottomLayer[id.xy];

    float alphaRatioBottom = (min(1.0 - top.a, bottom.a / (bottom.a + top.a)));
    float alphaRatioTop = 1.0 - alphaRatioBottom;

    float commonAlpha = min(top.a, bottom.a);
    float commonTopRatio = 1 - commonAlpha / max(0.00001,top.a);

    float bottomAlpha = bottom.a * (1.0 - top.a);
    float topAlpha = top.a;

    float finalAlpha = bottomAlpha + topAlpha;
    float colorCorrect = 1 / max(0.00001,(finalAlpha));
    float3 finalColor = bottom.rgb * lerp(1,top.rgb,top.a);

    Result[id.xy] = float4(finalColor, finalAlpha);
}

[numthreads(8,8,1)]
void AddBlend (uint3 id : SV_DispatchThreadID)
{
    float4 top = TopLayer[id.xy];
    top.a *= Opacity;
    float4 bottom = BottomLayer[id.xy];

    float bottomAlpha = bottom.a * (1.0 - top.a);
    float topAlpha = top.a;

    float finalAlpha = bottomAlpha + topAlpha;
    float colorCorrect = 1 / max(0.00001,(finalAlpha));
    float3 finalColor = (bottom.rgb * bottom.a + top.rgb * top.a) * colorCorrect;

    Result[id.xy] = saturate(float4(finalColor, finalAlpha));
}


[numthreads(8,8,1)]
void SubtractBlend (uint3 id : SV_DispatchThreadID)
{
    float4 top = TopLayer[id.xy];
    top.a *= Opacity;
    float4 bottom = BottomLayer[id.xy];

    float bottomAlpha = bottom.a * (1.0 - top.a);
    float topAlpha = top.a;

    float finalAlpha = bottomAlpha + topAlpha;
    float colorCorrect = 1 / max(0.00001,(finalAlpha));
    float3 finalColor = (bottom.rgb * bottom.a - top.rgb * top.a) * colorCorrect;

    Result[id.xy] = saturate(float4(finalColor, finalAlpha));
}