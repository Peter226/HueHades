
#pragma kernel NormalBlend;
#pragma kernel MultiplyBlend
#pragma kernel AddBlend
#pragma kernel SubtractBlend;

RWTexture2D<float4> BottomLayer;
Texture2D<float4> TopLayer;

uint4 SrcDstDim; //Source and Destination texture dimensions
uint2 DstXY; //Destination target offset
uint4 SrcRect; //Source target offset and dimensions
uint4 TileSrcXYDstXY; //Source and Destination tile modes

bool SelectAndTile(uint3 id, out uint2 bottomID, out uint2 topID){
    uint2 srcID = SrcRect.xy + id.xy;
    uint2 dstID = DstXY + id.xy;
    
    uint2 zero = uint2(0,0);
    if(all(
            ((srcID < SrcDstDim.xy) || TileSrcXYDstXY.xy) &&
            ((dstID < SrcDstDim.zw) || TileSrcXYDstXY.zw) &&
            id.xy < SrcRect.zw
       ))
       {
            bottomID = dstID % SrcDstDim.zw;
            topID = srcID % SrcDstDim.xy;
            return true;
       }
       bottomID = 0;
       topID = 0;
    return false;
}

[numthreads(8,8,1)]
void NormalBlend (uint3 id : SV_DispatchThreadID)
{
    uint2 bottomID;
    uint2 topID;
    if(SelectAndTile(id, bottomID, topID)){
        float4 top = TopLayer[topID];
        float4 bottom = BottomLayer[bottomID];
        BottomLayer[bottomID] = bottom * (1.0 - top.a) + float4(top.rgb * top.a, top.a);
    }
}

[numthreads(8,8,1)]
void MultiplyBlend (uint3 id : SV_DispatchThreadID)
{
    uint2 bottomID;
    uint2 topID;
    if(SelectAndTile(id, bottomID, topID)){
        float4 top = TopLayer[topID];
        float4 bottom = BottomLayer[bottomID];
        float4 bottomProp = bottom * (1.0 - top.a);
        BottomLayer[bottomID] = float4(bottom.rgb * lerp(1, top.rgb, top.a),min(1,bottomProp.a + top.a));
    }
}

[numthreads(8,8,1)]
void AddBlend (uint3 id : SV_DispatchThreadID)
{
    uint2 bottomID;
    uint2 topID;
    if(SelectAndTile(id, bottomID, topID)){
        float4 top = TopLayer[topID];
        float4 bottom = BottomLayer[bottomID];
        float4 bottomProp = bottom * (1.0 - top.a);
        float4 topProp = top * top.a;
        BottomLayer[bottomID] = min(1.0,float4(bottom.rgb + top.rgb,bottomProp.a + top.a));
    }
}

    [numthreads(8,8,1)]
void SubtractBlend (uint3 id : SV_DispatchThreadID)
{
    uint2 bottomID;
    uint2 topID;
    if(SelectAndTile(id, bottomID, topID)){
        float4 top = TopLayer[topID];
        float4 bottom = BottomLayer[bottomID];
        float4 bottomProp = bottom * (1.0 - top.a);
        float4 topProp = top * top.a;
        BottomLayer[bottomID] = max(0.0,float4(bottom.rgb - top.rgb,bottomProp.a + top.a));
    }
}