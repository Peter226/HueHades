#pragma kernel CSMain

Texture2D<float4> Input;
RWTexture2D<float4> Result;

float4 AdjustmentParams; //x > hue; y > saturation; z > brightness; w > contrast;



  float3 hue2rgb(in float H)
  {
    float R = abs(H * 6 - 3) - 1;
    float G = 2 - abs(H * 6 - 2);
    float B = 2 - abs(H * 6 - 4);
    return saturate(float3(R,G,B));
  }
 
  float3 rgb2hcv(in float3 rgb)
  {
    // Based on work by Sam Hocevar and Emil Persson
    float4 P = (rgb.g < rgb.b) ? float4(rgb.bg, -1.0, 2.0/3.0) : float4(rgb.gb, 0.0, -1.0/3.0);
    float4 Q = (rgb.r < P.x) ? float4(P.xyw, rgb.r) : float4(rgb.r, P.yzx);
    float C = Q.x - min(Q.w, Q.y);
    float H = abs((Q.w - Q.y) / (6 * C + 0.0000001) + Q.z);
    return float3(H, C, Q.x);
  }


  float3 rgb2hsl(in float3 rgb)
  {
    float3 HCV = rgb2hcv(rgb);
    float L = HCV.z - HCV.y * 0.5;
    float S = HCV.y / (1 - abs(L * 2 - 1) + 0.0000001);
    return float3(HCV.x, S, L);
  }



  float3 hsl2rgb(in float3 HSL)
  {
    float3 rgb = hue2rgb(HSL.x);
    float C = (1 - abs(2 * HSL.z - 1)) * HSL.y;
    return (rgb - 0.5) * C + HSL.z;
  }


[numthreads(8,8,1)]
void CSMain (uint3 id : SV_DispatchThreadID)
{
    float4 c = Input[id.xy];
    float3 hsl = saturate(rgb2hsl(c.rgb));
    float4 remappedParams = AdjustmentParams - 0.5;
    hsl.x += remappedParams.x;
    hsl.x = frac(hsl.x);
    
    remappedParams *= 2;

    hsl.y *= AdjustmentParams.y * 2;
    hsl.z = lerp(hsl.z,0,saturate(-remappedParams.z));
    hsl.z = lerp(hsl.z,1,saturate(remappedParams.z));

    hsl.z += (hsl.z - 0.5) * remappedParams.w;
    
    c.rgb = saturate(hsl2rgb(saturate(hsl)));

    Result[id.xy] = c;
}
